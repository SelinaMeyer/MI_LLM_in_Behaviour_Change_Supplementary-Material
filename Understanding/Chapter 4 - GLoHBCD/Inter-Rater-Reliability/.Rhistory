CompQual <- melt(CompQual, id = c("Seite", "Evaluator", "Site Type"))
#Plot
ggplot(CompQual, aes(variable, value, colour = Bewerter)) + geom_boxplot() +
facet_wrap(~Art) + labs(x = "Thema", y = "Qualitätsbewertung") + ylim("überhaupt nicht","schlecht", "durchschnittlich", "gut", "sehr gut")
#Plot
ggplot(CompQual, aes(variable, value, colour = Evaluator)) + geom_boxplot() +
facet_wrap(~Site.Type) + labs(x = "Thema", y = "Qualitätsbewertung") + ylim("überhaupt nicht","schlecht", "durchschnittlich", "gut", "sehr gut")
#Plot
ggplot(CompQual, aes(variable, value, colour = Evaluator)) + geom_boxplot() +
facet_wrap(~Site Type) + labs(x = "Thema", y = "Qualitätsbewertung") + ylim("überhaupt nicht","schlecht", "durchschnittlich", "gut", "sehr gut")
head(CompQual)
#Plot
ggplot(CompQual, aes(variable, value, colour = Evaluator)) + geom_boxplot() +
facet_wrap(~Site Type) + labs(x = "Thema", y = "Qualitätsbewertung") + ylim("überhaupt nicht","schlecht", "durchschnittlich", "gut", "sehr gut")
colnames(CompQual) <- c("Seite", "Evaluator", "Type", "Nutrition", "Physical Activity", "Behaviour Change", "Pharmacotherapy", "Surgical Options")
CompQual <- subset.data.frame(RatingComparison, select = c(Seite, Bewerter, Art, QualErnährung, QualBewegung, QualVerhalten, QualMedizin, QualChirurgie))
colnames(CompQual) <- c("Seite", "Evaluator", "Type", "Nutrition", "Physical Activity", "Behaviour Change", "Pharmacotherapy", "Surgical Options")
CompQual <- melt(CompQual, id = c("Seite", "Evaluator", "Site Type"))
CompQual <- subset.data.frame(RatingComparison, select = c(Seite, Bewerter, Art, QualErnährung, QualBewegung, QualVerhalten, QualMedizin, QualChirurgie))
colnames(CompQual) <- c("Seite", "Evaluator", "Type", "Nutrition", "Physical Activity", "Behaviour Change", "Pharmacotherapy", "Surgical Options")
CompQual <- melt(CompQual, id = c("Seite", "Evaluator", "Type"))
#Plot
ggplot(CompQual, aes(variable, value, colour = Evaluator)) + geom_boxplot() +
facet_wrap(~Type) + labs(x = "Thema", y = "Qualitätsbewertung") + ylim("überhaupt nicht","schlecht", "durchschnittlich", "gut", "sehr gut")
library(dplyr)
library(coin)
library(car)
library(ggplot2)
library(ggpubr)
library(sjstats)
library(Hmisc)
library(matrixStats)
library(corrr)
library(corrplot)
library(RcmdrMisc)
library(reshape2)
library(FSA)
library(qpcR)
library(onewaytests)
library(userfriendlyscience)
library(rcompanion)
library(fifer)
library(PMCMR)
library(rstatix)
library(RQDA)
#VERGLEICH DER BEWERTUNGEN ZWISCHEN STUDIENLEITER UND TEILNEHMERN
f3 <- file.choose()
RatingComparison = read.table(
file = f3, encoding = "UTF-8",
header = TRUE, sep = ";",
strip.white = TRUE
)
RatingComparison <- subset.data.frame(RatingComparison, RatingComparison$Time.Spent > 100)
CompQual <- subset.data.frame(RatingComparison, select = c(Seite, Bewerter, Art, QualErnährung, QualBewegung, QualVerhalten, QualMedizin, QualChirurgie))
colnames(CompQual) <- c("Seite", "Evaluator", "Type", "Nutrition", "Physical Activity", "Behaviour Change", "Pharmacotherapy", "Surgical Options")
CompQual <- melt(CompQual, id = c("Seite", "Evaluator", "Type"))
CompThemes <- subset.data.frame(RatingComparison, select = c(Seite, Bewerter, Art, Ernährung, Bewegung, Verhalten, Medizin, Chirurgie, Design))
colnames(CompThemes) <- c("Seite", "Evaluator", "Type", "Nutrition", "Physical Activity", "Behaviour Change", "Pharmacotherapy", "Surgical Options")
CompThemes <- melt(CompThemes, id = c("Seite", "Evaluator", "Type"))
#Plot
ggplot(CompQual, aes(variable, value, colour = Evaluator)) + geom_boxplot() +
facet_wrap(~Type) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +labs(x = "Topic", y = "Quality rating") + ylim("no mention","poor", "average", "good", "very good")
ggplot(CompThemes, aes(variable, value, colour = Evaluator)) + geom_boxplot() + facet_wrap(~Type) + theme(axis.text.x = element_text(angle = 90, hjust = 1))+ labs(x = "Topic", y = "Number of checked criteria")
#Plot
ggplot(CompQual, aes(variable, value, colour = Evaluator)) + geom_boxplot() +
facet_wrap(~Type) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +labs(x = "Topic", y = "Quality rating") + ylim("no mention","poor", "average", "good", "very good")
library(dplyr)
library(coin)
library(car)
library(ggplot2)
library(ggpubr)
library(sjstats)
library(Hmisc)
library(matrixStats)
library(corrr)
library(corrplot)
library(RcmdrMisc)
library(reshape2)
library(FSA)
library(qpcR)
library(onewaytests)
library(userfriendlyscience)
library(rcompanion)
library(fifer)
library(PMCMR)
library(rstatix)
library(RQDA)
#VERGLEICH DER BEWERTUNGEN ZWISCHEN STUDIENLEITER UND TEILNEHMERN
f3 <- file.choose()
RatingComparison = read.table(
file = f3, encoding = "UTF-8",
header = TRUE, sep = ";",
strip.white = TRUE
)
RatingComparison <- subset.data.frame(RatingComparison, RatingComparison$Time.Spent > 100)
CompQual <- subset.data.frame(RatingComparison, select = c(Seite, Bewerter, Art, QualErnährung, QualBewegung, QualVerhalten, QualMedizin, QualChirurgie))
colnames(CompQual) <- c("Seite", "Evaluator", "Type", "Nutrition", "Physical Activity", "Behaviour Change", "Pharmacotherapy", "Surgical Options")
CompQual <- melt(CompQual, id = c("Seite", "Evaluator", "Type"))
CompThemes <- subset.data.frame(RatingComparison, select = c(Seite, Bewerter, Art, Ernährung, Bewegung, Verhalten, Medizin, Chirurgie, Design))
colnames(CompThemes) <- c("Seite", "Evaluator", "Type", "Nutrition", "Physical Activity", "Behaviour Change", "Pharmacotherapy", "Surgical Options")
CompThemes <- melt(CompThemes, id = c("Seite", "Evaluator", "Type"))
ggplot(CompThemes, aes(variable, value, colour = Evaluator)) + geom_boxplot() + facet_wrap(~Type) + theme(axis.text.x = element_text(angle = 90, hjust = 1))+ labs(x = "Topic", y = "Number of checked criteria")
CompThemes <- subset.data.frame(RatingComparison, select = c(Seite, Bewerter, Art, Ernährung, Bewegung, Verhalten, Medizin, Chirurgie, Design))
colnames(CompThemes) <- c("Seite", "Evaluator", "Type", "Nutrition", "Physical Activity", "Behaviour Change", "Pharmacotherapy", "Surgical Options", "Design")
CompThemes <- melt(CompThemes, id = c("Seite", "Evaluator", "Type"))
ggplot(CompThemes, aes(variable, value, colour = Evaluator)) + geom_boxplot() + facet_wrap(~Type) + theme(axis.text.x = element_text(angle = 90, hjust = 1))+ labs(x = "Topic", y = "Number of checked criteria")
CompClaims <- subset.data.frame(RatingComparison, select = c(Bewerter, Art, Claims))
ggplot(CompClaims, aes(Art, Claims, colour = Bewerter)) + geom_boxplot() + labs(x = "Art der Webseite", y = "Anteil unbelegter Behauptungen")
ggplot(CompClaims, aes(Art, Claims, colour = Bewerter)) + geom_boxplot() + labs(x = "Type", y = "Share of Unsubstantiated Claims")
overallClQ <- subset.data.frame(overallPart, Rating.Type != "Gesamtscores")
overallClQ <- subset.data.frame(overallClQ, Rating.Type != "Themenscores")
overallClQ <- subset.data.frame(overallClQ, Rating.Type != "Einzelkriterien")
ggplot(overallClQ, aes(Time, kripp.value, colour = Art, group = Art)) + stat_summary(fun.y = mean, geom = "point") + stat_summary(fun.y = mean, geom = "line") +
stat_summary(fun.data = mean_cl_boot, geom = "line") + facet_wrap(~Rating.Type) + labs(x = "Bewertungszeit pro Webseite", y = "Durchschnittliche Übereinstimmung zwischen Teilnehmern", colour = "Art der Webseite")
overallClQ <- subset.data.frame(overallPart, Rating.Type != "Gesamtscores")
overallClQ <- subset.data.frame(overallClQ, Rating.Type != "Themenscores")
overallClQ <- subset.data.frame(overallClQ, Rating.Type != "Einzelkriterien")
ggplot(overallClQ, aes(Time, kripp.value, colour = Art, group = Art)) + stat_summary(fun.y = mean, geom = "point") + stat_summary(fun.y = mean, geom = "line") +
stat_summary(fun.data = mean_cl_boot, geom = "line") + facet_wrap(~Rating.Type) + labs(x = "Bewertungszeit pro Webseite", y = "Durchschnittliche Übereinstimmung zwischen Teilnehmern", colour = "Art der Webseite")
#VERGLEICH DER ÜBEREINSTIMMUNG NACH ZEIT
f2 <- file.choose()
overall = read.table(
file = f2, encoding = "UTF-8",
header = TRUE, sep = ";",
strip.white = TRUE
)
head(overall)
overallPart <- subset.data.frame(overall, overall$Raters == "Teilnehmer")
overallPart$Time <- as.factor(overallPart$Time)
overallClQ <- subset.data.frame(overallPart, Rating.Type != "Set 3 (total scores)")
head(overallClQ)
overallClQ <- subset.data.frame(overallClQ, Rating.Type != "Set 2 (subject subscores")
head(overallClQ)
overallClQ <- subset.data.frame(overallClQ, Rating.Type != "Set 2 (subject subscores)")
head(overallClQ)
overallClQ <- subset.data.frame(overallClQ, Rating.Type != "Set 1 (single criteria)")
head(overallClQ)
#VERGLEICH DER ÜBEREINSTIMMUNG NACH ZEIT
f2 <- file.choose()
overall = read.table(
file = f2, encoding = "UTF-8",
header = TRUE, sep = ";",
strip.white = TRUE
)
overallPart <- subset.data.frame(overall, overall$Raters == "Teilnehmer")
overallPart$Time <- as.factor(overallPart$Time)
overallClQ <- subset.data.frame(overallPart, Rating.Type != "Set 3 (total scores)")
overallClQ <- subset.data.frame(overallClQ, Rating.Type != "Set 2 (subject subscores)")
overallClQ <- subset.data.frame(overallClQ, Rating.Type != "Set 1 (single criteria)")
ggplot(overallClQ, aes(Time, kripp.value, colour = Art, group = Art)) + stat_summary(fun.y = mean, geom = "point") + stat_summary(fun.y = mean, geom = "line") +
stat_summary(fun.data = mean_cl_boot, geom = "line") + facet_wrap(~Rating.Type) + labs(x = "Bewertungszeit pro Webseite", y = "Durchschnittliche Übereinstimmung zwischen Teilnehmern", colour = "Art der Webseite")
ggplot(overallClQ, aes(Time, kripp.value, colour = Art, group = Art)) + stat_summary(fun.y = mean, geom = "point") + stat_summary(fun.y = mean, geom = "line") +
stat_summary(fun.data = mean_cl_boot, geom = "line") + facet_wrap(~Rating.Type) + labs(x = "Rating time per site", y = "Mean agreement", colour = "Type")
head(overallClQ)
max(overallClQ$kripp.value)
overallclq550 <- subset.data.frame(select = c(overallClQ$Time ==550))
overallclq550 <- subset.data.frame(select = overallClQ$Time == 550)
overallclq550 <- subset.data.frame(c(overallClQ$Time ==550))
overallclq550 <- subset.data.frame(overallClQ, overallClQ$Time ==550)
overallclq550
mean(overallclq550$kripp.value)
subset.data.frame(overallclq550, Art == Commercial)
subset.data.frame(overallclq550, Art == "Commercial")
overallclq550
overalclq550Com <- subset.data.frame(overallclq550, Art == "Commercial")
overallclq550Com <- subset.data.frame(overallclq550, Rating.Type == "Quality")
mean(overallclq550Com$kripp.value)
mean(overalclq550Com$kripp.value)
overalclq550Com
overallclq550Com <- subset.data.frame(overalclq550, Rating.Type == "Quality")
overallclq550Com <- subset.data.frame(overalclq550Com, Rating.Type == "Quality")
mean(overallclq550Com$kripp.value)
overallclqclaims <- subset.data.frame(overallClQ$Rating.Type == "Unsubstantiated Claims")
verallclqclaims <- subset.data.frame(overallCLQ, overallClQ$Rating.Type == "Unsubstantiated Claims")
verallclqclaims <- subset.data.frame(overallClQ, overallClQ$Rating.Type == "Unsubstantiated Claims")
verallclqclaims <- subset.data.frame(verallclqclaims, verallclqclaims$Time == 600)
verallclqclaims <- subset.data.frame(verallclqclaims, verallclqclaims$Art == "Non-profit")
mean(verallclqclaims$kripp.value)
library(tidyverse)
library(data.table)
library(data.table)
# Precisions
system_label <- c('System 1', 'System 2')
relevance_judgement <- c('r', 'n')
in1_performance = data.table(
Rank = c(1,2,3,4,5,6,7,8,9,10),
System1 = c('r','r','r','n', 'r','r','n','n','n','n'),
System2 = c('r','n','r','r', 'r','r','n','n','n','n')
)
in2_performance = data.table(
Rank = c(1,2,3,4,5,6,7,8,9,10),
System1 = c('r','r','r','n', 'n','n','n','n','n','n'),
System2 = c('r','n','r','r', 'n','n','n','n','n','n')
)
in3_performance = data.table(
Rank = c(1,2,3,4,5,6,7,8,9,10),
System1 = c('r','n','r','r', 'r','n','n','n','n','n'),
System2 = c('r','n','n','r', 'r','r','n','n','n','n')
)
in3_performance
in1_performance$PrecisionSys1 <- c(1/1, 2/2, 3/3, 4/4, 5/5, 5/6, 5/7, 5/8, 5/9, 5/10)
in1_performance$RecallSys1 <- c(1/5, 2/5, 3/5, 3/5, 3/5, 3/5, 3/5, 3/5, 4/5, 5/5)
in1_performance$PrecisionSys2 <- c(1/1, 1/2, 2/3, 3/4, 4/5, 5/6, 5/7, 5/8, 5/9, 5/10)
in1_performance$RecallSys2 <- c(1/5, 1/5, 2/5, 3/5, 4/5, 5/5, 5/5, 5/5, 5/5, 5/5)
in1_performance
in2_performance$PrecisionSys1 <- c(1/1, 2/2, 3/3, 3/4, 3/5, 3/6, 3/7, 3/8, 3/9, 3/10)
in2_performance$RecallSys1 <- c(1/3, 2/3, 3/3, 3/3, 3/3, 3/3, 3/3, 3/3, 3/3, 3/3)
in2_performance$PrecisionSys2 <- c(1/1, 1/2, 2/3, 3/4, 3/5, 3/6, 3/7, 3/8, 3/9, 3/10)
in2_performance$RecallSys2 <- c(1/3, 1/3, 2/3, 2/3, 3/3, 3/3, 3/3, 3/3, 3/3, 3/3)
in3_performance$PrecisionSys1 <- c(1/1, 1/2, 2/3, 3/4, 4/5, 4/6, 4/7, 4/8, 4/9, 4/10)
in3_performance$RecallSys1 <- c(1/4, 1/4, 2/4, 3/4, 4/4, 4/4, 4/4, 4/4, 4/4, 4/4)
in3_performance$PrecisionSys2 <- c(1/1, 1/2, 1/3, 2/4, 3/5, 4/6, 4/7, 4/8, 4/9, 4/10)
in3_performance$RecallSys2 <- c(1/4, 1/4, 1/4, 2/4, 3/5, 4/4, 4/4, 4/4, 4/4, 4/4)
in1_sys1_average_precision <- mean(in1_performance$PrecisionSys1[in1_performance$System1=='r'])
in1_sys2_average_precision <- mean(in1_performance$PrecisionSys2[in1_performance$System2=='r'])
in2_sys1_average_precision <- mean(in2_performance$PrecisionSys1[in1_performance$System1=='r'])
in2_sys2_average_precision <- mean(in2_performance$PrecisionSys2[in1_performance$System2=='r'])
in3_sys1_average_precision <- mean(in3_performance$PrecisionSys1[in1_performance$System1=='r'])
in3_sys2_average_precision <- mean(in3_performance$PrecisionSys2[in1_performance$System2=='r'])
map_sys1 <- mean(in1_sys1_average_precision, in2_sys1_average_precision, in3_sys1_average_precision)
map_sys2 <- mean(in1_sys2_average_precision, in2_sys2_average_precision, in3_sys2_average_precision)
system1_PR_curve <- ggplot() +
geom_line(data=in1_performance, mapping=aes(x=RecallSys1, y=PrecisionSys1), color='red') +
geom_line(data=in2_performance, mapping=aes(x=RecallSys1, y=PrecisionSys1), color='blue') +
geom_line(data=in3_performance, mapping=aes(x=RecallSys1, y=PrecisionSys1), color='green') +
xlab('Recall') +
ylab('Precision')
system2_PR_curve <- ggplot() +
geom_line(data=in1_performance, mapping=aes(x=RecallSys2, y=PrecisionSys2), color='red') +
geom_line(data=in2_performance, mapping=aes(x=RecallSys2, y=PrecisionSys2), color='blue') +
geom_line(data=in3_performance, mapping=aes(x=RecallSys2, y=PrecisionSys2), color='green') +
xlab('Recall') +
ylab('Precision')
infoneed1_PR_curve <- ggplot() +
geom_line(data=in1_performance, mapping=aes(x=RecallSys1, y=PrecisionSys1), color='red') +
geom_line(data=in1_performance, mapping=aes(x=RecallSys2, y=PrecisionSys2), color='blue') +
xlab('Recall') +
ylab('Precision') +
scale_colour_discrete(name="System", labels=c("System1", "System2"))
infoneed2_PR_curve <- ggplot() +
geom_line(data=in2_performance, mapping=aes(x=RecallSys1, y=PrecisionSys1), color='red') +
geom_line(data=in2_performance, mapping=aes(x=RecallSys2, y=PrecisionSys2), color='blue') +
xlab('Recall') +
ylab('Precision') +
scale_colour_discrete(name="System", labels=c("System1", "System2"))
infoneed3_PR_curve <- ggplot() +
geom_line(data=in3_performance, mapping=aes(x=RecallSys1, y=PrecisionSys1), color='red') +
geom_line(data=in3_performance, mapping=aes(x=RecallSys2, y=PrecisionSys2), color='blue') +
xlab('Recall') +
ylab('Precision') +
scale_colour_discrete(name="System", labels=c("System1", "System2"))
infoneed1_PR_curve
system1_PR_curve
system2_PR_curve
system1 <- data.table(
InfoNeed1Precision = in1_performance$PrecisionSys1,
InfoNeed2Precision = in2_performance$PrecisionSys1,
InfoNeed3Precision = in3_performance$PrecisionSys1
)
#system1$AvgPrec <- rowMeans(system1[,c(system1$InfoNeed1Precision,system1$InfoNeed2Precision,system1$InfoNeed3Precision)])
#system1$InterpRecall <- c(.0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1.)
system1$AvgPrec <- rowMeans(system1[,c("InfoNeed1Precision","InfoNeed2Precision","InfoNeed3Precision")])
system1_interpolated <- data.table(
InterpRecall = c(.0, .1, .2, .3, .4, .5, .6, .7, .8, .9, 1.),
InterpPrecisionIN1 = c(1, 1, 1, 1, 1, 1, 5/9, 5/9, 5/9, 1/2,1/2),
InterpPrecisionIN2 = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
InterpPrecisionIN3 = c(1, 1, 1, 2/3, 2/3, 2/3, .8, .8, .8, .8, .8)
)
system1_interpolated$InterpAvgPrec <- rowMeans(system1_interpolated[,c("InterpPrecisionIN1","InterpPrecisionIN2","InterpPrecisionIN3")])
system2_interpolated <- data.table(
InterpRecall = c(.0, .1, .2, .3, .4, .5, .6, .7, .8, .9, 1.),
InterpPrecisionIN1 = c(1, 1, 1, 5/6, 5/6, 5/6, 5/6, 5/6, 5/6, 5/6,5/6),
InterpPrecisionIN2 = c(1, 1, 1, 3/4, 3/4, 3/4, 3/4, .6, .6, .6, .6),
InterpPrecisionIN3 = c(1, 1, 1, 2/3, 2/3, 2/3,  2/3,  2/3,  2/3,  2/3,  2/3)
)
system2_interpolated$InterpAvgPrec <- rowMeans(system2_interpolated[,c("InterpPrecisionIN1","InterpPrecisionIN2","InterpPrecisionIN3")])
system2 <- data.table(
InfoNeed1Precision = in1_performance$PrecisionSys2,
InfoNeed2Precision = in2_performance$PrecisionSys2,
InfoNeed3Precision = in3_performance$PrecisionSys2
)
system2$AvgPrec <- rowMeans(system2[,c("InfoNeed1Precision","InfoNeed2Precision","InfoNeed3Precision")])
PR_curve <- ggplot() +
geom_line(data=system1, mapping=aes(x=c(.1,.2,.3,.4,.5,.6,.7,.8,.9,1), y=AvgPrec), color='red') +
geom_line(data=system2, mapping=aes(x=c(.1,.2,.3,.4,.5,.6,.7,.8,.9,1), y=AvgPrec), color='blue') +
xlab('Recall') +
ylab('Precision')
PR_curve
PR_curve_interpolated <- ggplot() +
geom_line(data=system1_interpolated, mapping=aes(x=InterpRecall, y=InterpAvgPrec), color='red') +
geom_line(data=system2_interpolated, mapping=aes(x=InterpRecall, y=InterpAvgPrec), color='blue') +
xlab('Recall') +
ylab('Precision')
PR_curve_interpolated
PR_curve
system_label <- c('System 1', 'System 2')
relevance_judgement <- c('r', 'n')
in1_performance = data.table(
Rank = c(1,2,3,4,5,6,7,8,9,10),
System1 = c('r','r','r','n', 'r','r','n','n','n','n'),
System2 = c('r','n','r','r', 'r','r','n','n','n','n')
)
in2_performance = data.table(
Rank = c(1,2,3,4,5,6,7,8,9,10),
System1 = c('r','r','r','n', 'n','n','n','n','n','n'),
System2 = c('r','n','r','r', 'n','n','n','n','n','n')
)
in3_performance = data.table(
Rank = c(1,2,3,4,5,6,7,8,9,10),
System1 = c('r','n','r','r', 'r','n','n','n','n','n'),
System2 = c('r','n','n','r', 'r','r','n','n','n','n')
)
in3_performance
in1_sys1_average_precision
in2_sys1_average_precision
[in1_performance$System1=='r']
in1_sys1_average_precision <- mean(in1_performance$PrecisionSys1[in1_performance$System1=='r'])
in1_performance$PrecisionSys1 <- c(1/1, 2/2, 3/3, 3/4, 4/5, 5/6, 5/7, 5/8, 5/9, 5/10)
in1_performance$RecallSys1 <- c(1/5, 2/5, 3/5, 3/5, 4/5, 5/5, 5/5, 5/5, 5/5, 5/5)
in1_performance$PrecisionSys2 <- c(1/1, 1/2, 2/3, 3/4, 4/5, 5/6, 5/7, 5/8, 5/9, 5/10)
in1_performance$RecallSys2 <- c(1/5, 1/5, 2/5, 3/5, 4/5, 5/5, 5/5, 5/5, 5/5, 5/5)
in2_performance$PrecisionSys1 <- c(1/1, 2/2, 3/3, 3/4, 3/5, 3/6, 3/7, 3/8, 3/9, 3/10)
in2_performance$RecallSys1 <- c(1/3, 2/3, 3/3, 3/3, 3/3, 3/3, 3/3, 3/3, 3/3, 3/3)
in2_performance$PrecisionSys2 <- c(1/1, 1/2, 2/3, 3/4, 3/5, 3/6, 3/7, 3/8, 3/9, 3/10)
in2_performance$RecallSys2 <- c(1/3, 1/3, 2/3, 2/3, 3/3, 3/3, 3/3, 3/3, 3/3, 3/3)
in3_performance$PrecisionSys1 <- c(1/1, 1/2, 2/3, 3/4, 4/5, 4/6, 4/7, 4/8, 4/9, 4/10)
in3_performance$RecallSys1 <- c(1/4, 1/4, 2/4, 3/4, 4/4, 4/4, 4/4, 4/4, 4/4, 4/4)
in3_performance$PrecisionSys2 <- c(1/1, 1/2, 1/3, 2/4, 3/5, 4/6, 4/7, 4/8, 4/9, 4/10)
in3_performance$RecallSys2 <- c(1/4, 1/4, 1/4, 2/4, 3/5, 4/4, 4/4, 4/4, 4/4, 4/4)
in1_sys1_average_precision <- mean(in1_performance$PrecisionSys1[in1_performance$System1=='r'])
in1_sys1_average_precision
in1_sys1_average_precision <- mean(in1_performance$PrecisionSys1)
in1_sys1_average_precision
PR_curve <- ggplot() +
geom_line(data=system1, mapping=aes(x=c(.1,.2,.3,.4,.5,.6,.7,.8,.9,1), y=AvgPrec), color='red') +
geom_line(data=system2, mapping=aes(x=c(.1,.2,.3,.4,.5,.6,.7,.8,.9,1), y=AvgPrec), color='blue') +
xlab('Recall') +
ylab('Precision')
PR_curve
PR_curve
PR_curve <- ggplot() +
geom_line(data=system1, mapping=aes(x=c(.1,.2,.3,.4,.5,.6,.7,.8,.9,1), y=AvgPrec), color='red') +
geom_line(data=system2, mapping=aes(x=c(.1,.2,.3,.4,.5,.6,.7,.8,.9,1), y=AvgPrec), color='blue') +
xlab('Recall') +
ylab('Precision')
PR_curve
PR_curve
library(RQDA)
install.packages(c("gWidgets", "gWidgetsRGtk2", "RGtk2", "igraph","plogr","bit","RSQLite"),depen=T)
update.packages(ask = FALSE, checkBuilt = TRUE)
library(RGtk2)
install.packages("https://cran.r-project.org/src/contrib/Archive/RQDA/RQDA_0.3-1.tar.gz", type = "source", INSTALL_opts = "--no-multiarch")
library(RQDA)
library(RSQLite)
remove.packages(c("gWidgets", "gWidgetsRGtk2", "RGtk2", "cairoDevice", "igraph","plogr","bit","RSQLite"),depen=T)
remove.packages(c("gWidgets", "gWidgetsRGtk2", "RGtk2", "cairoDevice", "igraph","plogr","bit","RSQLite"))
install.packages(c("gWidgets", "gWidgetsRGtk2", "RGtk2", "cairoDevice", "igraph","plogr","bit","RSQLite"),depen=T)
install.packages("graph")
update.packages(ask = FALSE, checkBuilt = TRUE)
library(RGtk2)
if (!requireNamespace("devtools"))
install.packages("devtools")
devtools::install_github("Ronggui/RQDA")
if (!requireNamespace("devtools"))
install.packages("devtools")
devtools::install_github("Ronggui/RQDA", force = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
library(RQDA)
install.packages(c("gWidgets", "gWidgetsRGtk2", "RGtk2", "cairoDevice", "igraph","plogr","bit","RSQLite"),depen=T)
install.packages(c("gWidgets", "gWidgetsRGtk2", "RGtk2", "cairoDevice", "igraph", "plogr", "bit", "RSQLite"), depen = T)
remove.packages(RQDA)
install.packages('https://cran.r-project.org/src/contrib/Archive/RQDA/RQDA_0.3-1.tar.gz', type = "source" , dependencies = TRUE)
install.packages('https://cran.r-project.org/src/contrib/Archive/RQDA/RQDA_0.2-3.tar.gz', type = "source" , dependencies = TRUE)
install.packages(c("gWidgets", "gWidgetsRGtk2", "RGtk2", "RSQLite", "igraph"))
install.packages("https://cran.r-project.org/src/contrib/Archive/RQDA/RQDA_0.3-1.tar.gz", type = "source")
install.packages('https://cran.r-project.org/src/contrib/Archive/RQDA/RQDA_0.2-3.tar.gz', type = "source" , dependencies = TRUE)
if (!requireNamespace("devtools"))
install.packages("devtools")
devtools::install_github("Ronggui/RQDA", force = TRUE)
install.packages(gWidgetsRGtk2)
install.packages("gWidgetsRGtk2")
install.packages('https://cran.r-project.org/src/contrib/Archive/gWidgetsRGtk2/gWidgetsRGtk2_0.0-86.tar.gz', type = "source", dependencies = TRUE)
install.packages('https://www.rdocumentation.org/packages/gWidgetsRGtk2/versions/0.0-86.1/topics/gWidgetsRGtk2-package', type = "source", dependencies = TRUE)
install.packages("DescTools")
library(DescTools)
library(tidyr)
library(car)
library(lmtest)
dat <- read.csv(file = 'data_for_r.csv')
#dat <- read.csv(file = 'data_for_r_pos.csv', sep=";")
sapply(dat, typeof)
drop <- c("stage")
dat = dat[,!(names(dat) %in% drop)]
dat = dat[apply(dat,1,function(dat)all(dat>=0)),]
dat <- read.csv(file = 'data_for_r.csv')
dat = dat[apply(dat,1,function(dat)all(dat>=0)),]
install.packages("rstatix")
install.packages("rstatix")
install.packages("rstatix")
install.packages("rstatix")
install.packages("rstatix")
install.packages("rstatix")
library(tidyr)
library(car)
library(lmtest)
library(MASS)
library(sfsmisc)
library(gvlma)
library(LambertW)
library(PerformanceAnalytics)
library(dplyr)
library(irr)
library(caret)
library(psych)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
dat <- read.csv(file='IRR_Results.csv', sep=";")
drop_codes_level_1 <- c("Rater_2_reason_type", "Rater_2_valence", "Rater_1_reason_type","Rater_1_valence")
drop_codes_lev1_pol <- c("Rater_2_reason_type", "Rater_1_reason_type")
drop_codes_pol <- c("Rater_2_topic", "Rater_2_reason_type", "Rater_2_topic", "Rater_2_reason_type")
level_1 <- dat[,!(names(dat) %in% drop_codes_level_1)]
drop_codes_topic <- c("Rater_2_reason_type", "Rater_2_valence", "Rater_1_reason_type","Rater_1_valence")
drop_codes_topic_valence <- c("Rater_2_reason_type", "Rater_1_reason_type")
drop_codes_valence <- c("Rater_2_topic", "Rater_2_reason_type", "Rater_1_topic", "Rater_1_reason_type")
topic <- dat[,!(names(dat) %in% drop_codes_topic)]
topic_valence <- dat[,!(names(dat) %in% drop_codes_topic_valence)]
valence <- dat[,!(names(dat) %in% drop_codes_valence)]
reason_type <- dat[c("Rater_2_reason_type", "Rater_1_reason_type")]
dat <- read.csv(file='IRR_Results.csv', sep=";")
drop_codes_topic <- c("Rater_2_reason_type", "Rater_2_valence", "Rater_1_reason_type","Rater_1_valence")
drop_codes_topic_valence <- c("Rater_2_reason_type", "Rater_1_reason_type")
drop_codes_valence <- c("Rater_2_topic", "Rater_2_reason_type", "Rater_1_topic", "Rater_1_reason_type")
topic <- dat[,!(names(dat) %in% drop_codes_topic)]
topic_valence <- dat[,!(names(dat) %in% drop_codes_topic_valence)]
valence <- dat[,!(names(dat) %in% drop_codes_valence)]
reason_type <- dat[c("Rater_2_reason_type", "Rater_1_reason_type")]
topic_valence$Rater_2_topic_valence <- paste(dat$Rater_2_topic, dat$Rater_2_valence)
topic_valence$Rater_1_topic_valence <- paste(dat$Rater_1_topic, dat$Rater_1_valence)
topic_valence_test <- topic_valence[c("Rater_1_topic_valence", "Rater_2_topic_valence")]
# einzige Zeile die C- beinhaltet droppen
drop_line <- c(75)
lev1_pol_test_c <- lev1_pol_test[-drop_line,]
kappa2(valence)
kappam.fleiss(valence, detail=TRUE)
valence
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
dat <- read.csv(file='IRR_Results_original.csv', sep=";")
drop_codes_level_1 <- c("Alex_Level_2", "Alex_Polarität", "O_Level_2","O_Polarität")
drop_codes_lev1_pol <- c("Alex_Level_2", "O_Level_2")
drop_codes_pol <- c("Alex_Level_1", "Alex_Level_2", "O_Level_1", "O_Level_2")
level_1 <- dat[,!(names(dat) %in% drop_codes_level_1)]
lev1_pol <- dat[,!(names(dat) %in% drop_codes_lev1_pol)]
pol <- dat[,!(names(dat) %in% drop_codes_pol)]
level_2 <- dat[c("Alex_Level_2", "O_Level_2")]
lev1_pol$Alex_lev1_pol <- paste(dat$Alex_Level_1, dat$Alex_Polarität)
lev1_pol$O_lev1_pol <- paste(dat$O_Level_1, dat$O_Polarität)
lev1_pol_test <- lev1_pol[c("Alex_lev1_pol", "O_lev1_pol")]
# einzige Zeile die C- beinhaltet droppen
drop_line <- c(75)
lev1_pol_test_c <- lev1_pol_test[-drop_line,]
kappam.fleiss(lev1_pol_test_c, detail=TRUE)
dat$Alex_Code <- paste(dat$Alex_Level_1, dat$Alex_Level_2, dat$Alex_Polarität)
dat$O_Code <- paste(dat$O_Level_1, dat$O_Level_2, dat$O_Polarität)
all <- dat[c("Alex_Code", "O_Code")]
kappam.fleiss(level_1, detail=TRUE)
kappa2(level_1)
confusionMatrix(level_1$O_Level_1, level_1$Alex_Level_1, mode="everything")
dat$Alex_1_2 <- paste(dat$Alex_Level_1, dat$Alex_Level_2)
dat$O_1_2 <- paste(dat$O_Level_1, dat$O_Level_2)
level_1_2 <- dat[c("Alex_1_2", "O_1_2")]
kappam.fleiss(level_1_2, detail=TRUE)
kappa2(level_1_2)
table(level_1_2$O_1_2, level_1_2$Alex_1_2)
level_2_R = dat[dat$O_Level_1 == "R",]
level_2_R_2 = level_2_R[c("Alex_Level_2", "O_Level_2")]
kappam.fleiss(level_2_R_2, detail=TRUE)
kappa2(level_2_R_2)
table(level_2$O_Level_2, level_1_2$Alex_1_2)
kappam.fleiss(level_2, detail=TRUE)
kappa2(level_2)
kappam.fleiss(pol, detail=TRUE)
confusionMatrix(pol$O_Polarität, pol$Alex_Polarität, mode="everything")
kappam.fleiss(lev1_pol_test, detail=TRUE)
kappa2(lev1_pol_test)
table(lev1_pol_test$O_lev1_pol, lev1_pol_test$Alex_lev1_pol)
kappam.fleiss(all, detail=TRUE)
kappam.fleiss(label_pol_no_ambi, detail=TRUE)
kappam.fleiss(codes_no_ambi, detail=TRUE)
dat <- read.csv(file='IRR_Results.csv', sep=";")
reason_type <- dat[c("Rater_2_reason_type", "Rater_1_reason_type")]
dat
dat <- read.csv(file='IRR_Results.csv', sep=",")
reason_type <- dat[c("Rater_2_reason_type", "Rater_1_reason_type")]
kappam.fleiss(reason_type, detail=TRUE)
valence <- dat[c("Rater_2_valence", "Rater_1_valence")]
kappam.fleiss(valence, detail=TRUE)
confusionMatrix(pol$O_Polarität, pol$Alex_Polarität, mode="everything")
topic <- dat[c("Rater_2_topic", "Rater_1_topic")]
kappam.fleiss(topic, detail=TRUE)
confusionMatrix(topic$Rater_1_topic, topic$rater_2_topic, mode="everything")
dat <- read.csv(file='IRR_Results.csv', sep=",")
topic <- dat[c("Rater_2_topic", "Rater_1_topic")]
valence <- dat[c("Rater_2_valence", "Rater_1_valence")]
reason_type <- dat[c("Rater_2_reason_type", "Rater_1_reason_type")]
kappam.fleiss(topic, detail=TRUE)
confusionMatrix(topic$Rater_1_topic, topic$Rater_2_topic, mode="everything")
kappam.fleiss(reason_type, detail=TRUE)
kappam.fleiss(valence, detail=TRUE)
confusionMatrix(valence$Rater_1_valence, valence$Rater_2_valence, mode="everything")
dat_R = dat[dat$Rater_1_topic == "R", ]
reason_type <- dat_R[c("Rater_2_reason_type", "Rater_1_reason_type")]
kappam.fleiss(reason_type, detail=TRUE)
confusionMatrix(reason_type$Rater_1_reason_type, reason_type$Rater_2_reason_type, mode="everything")
